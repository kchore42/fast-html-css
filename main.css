CSS / 속성 - 박스 모델 width, height

CSS에서 width와 height 속성은 박스 모델의 중요한 부분입니다. 

박스 모델은 HTML 요소 주위에 나타나는 박스의 구조를 설명합니다. 

기본적인 박스 모델 구성 요소는 다음과 같습니다:

콘텐츠(Content): 텍스트나 이미지가 들어가는 실제 내용 부분.
패딩(Padding): 콘텐츠 주위의 여백으로, 투명하게 표시됩니다.
테두리(Border): 패딩 주위의 경계선.
마진(Margin): 테두리 바깥의 여백으로, 투명하게 표시됩니다.

Width와 Height 속성

width: 요소의 콘텐츠 영역의 너비를 지정합니다.
height: 요소의 콘텐츠 영역의 높이를 지정합니다.

기본적으로 width와 height는 콘텐츠 영역만 포함하며, 패딩, 테두리, 마진은 포함하지 않습니다. 

이를 변경하려면 box-sizing 속성을 사용합니다.

문법

css
코드 복사

element {
    width: 값;
    height: 값;
}

값: px(픽셀), %(백분율), em(요소의 글꼴 크기에 상대적인 값), vw(뷰포트 너비), vh(뷰포트 높이) 등 다양한 단위를 사용할 수 있습니다.

Box-Sizing 속성
content-box: (기본값) width와 height는 콘텐츠만 포함합니다. 테두리와 패딩은 그 외부에 추가됩니다.
border-box: width와 height는 콘텐츠, 패딩, 테두리를 모두 포함합니다. 마진은 포함되지 않습니다.

예제

css

/* 기본 content-box 사용 */

.box {
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 5px solid black;
    margin: 20px;
    box-sizing: content-box; /* 기본값이므로 명시하지 않아도 됨 */
}

/* border-box 사용 */
.box-border-box {
    width: 100px;
    height: 100px;
    padding: 10px;
    border: 5px solid black;
    margin: 20px;
    box-sizing: border-box;
}

위 예제에서:

content-box를 사용하는 첫 번째 박스는 최종 크기가 width: 130px(100px 콘텐츠 + 각 측면의 10px 패딩 + 각 측면의 5px 테두리) 및 height: 130px가 됩니다.

border-box를 사용하는 두 번째 박스는 콘텐츠, 패딩, 테두리를 포함하여 width: 100px 및 height: 100px의 크기가 됩니다.

실용적인 사용법
box-sizing: border-box를 사용하면 패딩과 테두리를 width와 height에 포함시켜 레이아웃 조정이 더 간편해집니다. 
이는 반응형 디자인을 구현할 때 특히 유용합니다.body {
    /* 브라우저마다 기본 설정으로 BODY 요소에 margin과 padding의 값이 설정되어 있습니다. */
    /* 각각의 브라우저마다 BODY 요소가 다른 값을 가지고 있을 수 있으므로 우리가 일정하게 초기화해서 사용합니다. */
    /* 0은 단위를 사용하지 않습니다. */
    margin: 0;
    padding: 0;
  }
  
  .header {
    /* 화면에는 다음의 값으로 랜더링 되어 있는데 여러 이유로(설명이 많이 필요합니다) 생략 가능합니다. */
    /* width: 100%; */
    /* height: 75px; */
    background-color: white;
    border-bottom: 1px solid lightgray; /* 요소테두리선-아래: 1px두께 가는실선 밝은회색; - header 하단에 회색의 선이 표시됩니다. */
  }
  
  .container {
    /* height: 75px; */
    width: 980px;
    margin: auto; /* 요소바깥여백: 여백 자동; - 이 속성과 값은 container를 수평 가운데 정렬하는 속성으로 쓰입니다. */
  }
  
  .container-left {
    /* width: 370px; */
    /* height: 75px; */
    /* float: left; */
    padding-top: 20px;
    padding-bottom: 20px;
  }
  
  .logo {
    margin-right: 5px;
    float: left; /* 수평정렬: 왼쪽부터차례대로; - logo와 menu를 수평 정렬하기 위해 사용되었습니다. 이 속성의 정확한 의미는 수평 정렬이 아니지만 쉽게 이해하도록 의역했습니다. */
  }
  .logo img { /* logo의 자식(후손) 요소인 img 태그 - 선택자에서 띄어쓰기는 자식(후손)요소를 의미합니다. */
    display: block; /* 요소특성: 형태위주; - img(이미지) 하단에 생기는 불필요한 여백을 없애기 위해서 사용되었습니다. */
  }
  
  .menu {
    float: left; /* logo와 menu를 수평 정렬하기 위해 사용되었습니다. */
  }
  
  .menu-item {
    font-size: 16px;
    padding: 8px 10px; /* padding-top: 8px; padding-bottom: 8px; padding-left: 10px; padding-right: 10px; 과 같습니다. */
    float: left; /* 각 menu-item들을 수평 정렬하기 위해 사용되었습니다. */
    line-height: 1; /* 줄 높이, 행간과 비슷한 개념으로 이해할 수 있습니다. 기본 값은 normal이며 이는 약 1.2배 정도입니다. 그대로 유지하면 .menu-item의 높이가 약 35px이 되기 때문에 1배로 수정하여 32px로 .logo의 크기와 동일하게 작업합니다. */
  }
  
  /* float: left; 를 사용하고 마무리할 때 필요한 코드입니다. */
  /* float: left;를 사용한 해당 HTML 요소의 부모 요소에게 class="clearfix"를 입력하여 CSS float 속성에서 발생하는 현상을 해제합니다. */
  .clearfix::after {
    content: "";
    display: block;
    clear: both;
  }
  큰 단위의 요소(header)부터 코딩하는 방법과, 작은 단위 요소(menu-item나 logo)부터 코딩하는 방법을 번갈아 가면서 하나하나 변화를 눈으로 익히며 연습을 하시면 금방 익숙해질 겁니다.
  
  이 부분이 중요한데, float: left를 사용했다면 사용한 요소의 부모 요소에 꼭 class="clearfix"를 입력하고 변화를 확인하세요